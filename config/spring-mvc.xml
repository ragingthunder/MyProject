<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<context:property-placeholder location="classpath:dbConfig.properties" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${sql.url}" />
		<property name="username" value="${sql.username}" />
		<property name="password" value="${sql.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${sql.initialSize}" />
		<property name="minIdle" value="${sql.minIdle}" />
		<property name="maxActive" value="${sql.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${sql.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${sql.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${sql.minEvictableIdleTimeMillis}" />

		<property name="testWhileIdle" value="${sql.testWhileIdle}" />
		<property name="validationQuery" value="${sql.validationQuery}" />
		<property name="testOnBorrow" value="${sql.testOnBorrow}" />
		<property name="testOnReturn" value="${sql.testOnReturn}" />

		<!-- 配置监控统计拦截的filters,如果需要多个filter，用逗号隔开，内置：stat(StatFilter)、encoding(EncodingConvertFilter)、commonLogging(CommonsLogFilter)、 
			log4j(Log4jFilter)、trace(TraceFilter) -->
		<property name="filters" value="${sql.filters}" />
	</bean>

	<context:component-scan base-package="com.tongxing.portal" />
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.tongxing.portal.entity" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tongxing.portal.dao" />
		<property name="annotationClass" value="com.tongxing.modules.mybatis.MyBatisRepository"/>
	</bean>

	<mvc:annotation-driven />

	<!-- 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="index" />

	<!-- 对转向页面的路径解析 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".jsp" />
	</bean>

</beans>
